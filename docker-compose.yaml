services:
  server:
    image: nginx:stable-alpine3.19
		container_name: server
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - network
		restart: always
  app:
    build:
			context: .
			dockerfile: ./deploy/Dockerfile
    environment:
      - PORT=8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 2
		volumes:
      - ./data/logs:/app/data/logs
    networks:
      - network
		restart: on-failure
  db:
    image: postgres:16.1
    container_name: postgresdb
    environment:
      - POSTGRES_USER=ahargunyllib
      - POSTGRES_PASSWORD=ahargunyllib
      - POSTGRES_DB=ahargunyllib
      - TZ=Asia/Jakarta
      - PORT=5432
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - default
		healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      start_interval: 5s
      interval: 15s
      timeout: 5s
      retries: 3
	redis:
    image: redis:7.2.5-alpine
    container_name: rediscache
    environment:
      - REDIS_PASSWORD=ahargunyllib
      - REDIS_PORT=6379
    networks:
      - hology
    healthcheck:
      test:  ["CMD", "redis-cli", "-a", "ahargunyllib", "--raw", "incr", "ping" ]
      start_interval: 5s
      interval: 15s
      timeout: 5s
      retries: 3

networks:
  network:
    driver: bridge

volumes:
  db-data:
    driver: local
